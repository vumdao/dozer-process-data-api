// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 * Provisioner is the Schema for the Provisioners API
 *
 * @schema Provisioner
 */
export class Provisioner extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Provisioner"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'karpenter.sh/v1alpha5',
    kind: 'Provisioner',
  };

  /**
   * Renders a Kubernetes manifest for "Provisioner".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProvisionerProps = {}): any {
    return {
      ...Provisioner.GVK,
      ...toJson_ProvisionerProps(props),
    };
  }

  /**
   * Defines a "Provisioner" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProvisionerProps = {}) {
    super(scope, id, {
      ...Provisioner.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...Provisioner.GVK,
      ...toJson_ProvisionerProps(resolved),
    };
  }
}

/**
 * Provisioner is the Schema for the Provisioners API
 *
 * @schema Provisioner
 */
export interface ProvisionerProps {
  /**
   * @schema Provisioner#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * ProvisionerSpec is the top level provisioner specification. Provisioners launch nodes in response to pods that are unschedulable. A single provisioner is capable of managing a diverse set of nodes. Node properties are determined from a combination of provisioner and pod scheduling constraints.
   *
   * @schema Provisioner#spec
   */
  readonly spec?: ProvisionerSpec;

}

/**
 * Converts an object of type 'ProvisionerProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerProps(obj: ProvisionerProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_ProvisionerSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProvisionerSpec is the top level provisioner specification. Provisioners launch nodes in response to pods that are unschedulable. A single provisioner is capable of managing a diverse set of nodes. Node properties are determined from a combination of provisioner and pod scheduling constraints.
 *
 * @schema ProvisionerSpec
 */
export interface ProvisionerSpec {
  /**
   * Consolidation are the consolidation parameters
   *
   * @schema ProvisionerSpec#consolidation
   */
  readonly consolidation?: ProvisionerSpecConsolidation;

  /**
   * KubeletConfiguration are options passed to the kubelet when provisioning nodes
   *
   * @schema ProvisionerSpec#kubeletConfiguration
   */
  readonly kubeletConfiguration?: ProvisionerSpecKubeletConfiguration;

  /**
   * Labels are layered with Requirements and applied to every node.
   *
   * @schema ProvisionerSpec#labels
   */
  readonly labels?: { [key: string]: string };

  /**
   * Limits define a set of bounds for provisioning capacity.
   *
   * @schema ProvisionerSpec#limits
   */
  readonly limits?: ProvisionerSpecLimits;

  /**
   * Provider contains fields specific to your cloudprovider.
   *
   * @schema ProvisionerSpec#provider
   */
  readonly provider?: any;

  /**
   * ProviderRef is a reference to a dedicated CRD for the chosen provider, that holds additional configuration options
   *
   * @schema ProvisionerSpec#providerRef
   */
  readonly providerRef?: ProvisionerSpecProviderRef;

  /**
   * Requirements are layered with Labels and applied to every node.
   *
   * @schema ProvisionerSpec#requirements
   */
  readonly requirements?: ProvisionerSpecRequirements[];

  /**
   * StartupTaints are taints that are applied to nodes upon startup which are expected to be removed automatically within a short period of time, typically by a DaemonSet that tolerates the taint. These are commonly used by daemonsets to allow initialization and enforce startup ordering.  StartupTaints are ignored for provisioning purposes in that pods are not required to tolerate a StartupTaint in order to have nodes provisioned for them.
   *
   * @schema ProvisionerSpec#startupTaints
   */
  readonly startupTaints?: ProvisionerSpecStartupTaints[];

  /**
   * Taints will be applied to every node launched by the Provisioner. If specified, the provisioner will not provision nodes for pods that do not have matching tolerations. Additional taints will be created that match pod tolerations on a per-node basis.
   *
   * @schema ProvisionerSpec#taints
   */
  readonly taints?: ProvisionerSpecTaints[];

  /**
   * TTLSecondsAfterEmpty is the number of seconds the controller will wait before attempting to delete a node, measured from when the node is detected to be empty. A Node is considered to be empty when it does not have pods scheduled to it, excluding daemonsets.
   * Termination due to no utilization is disabled if this field is not set.
   *
   * @schema ProvisionerSpec#ttlSecondsAfterEmpty
   */
  readonly ttlSecondsAfterEmpty?: number;

  /**
   * TTLSecondsUntilExpired is the number of seconds the controller will wait before terminating a node, measured from when the node is created. This is useful to implement features like eventually consistent node upgrade, memory leak protection, and disruption testing.
   * Termination due to expiration is disabled if this field is not set.
   *
   * @schema ProvisionerSpec#ttlSecondsUntilExpired
   */
  readonly ttlSecondsUntilExpired?: number;

  /**
   * Weight is the priority given to the provisioner during scheduling. A higher numerical weight indicates that this provisioner will be ordered ahead of other provisioners with lower weights. A provisioner with no weight will be treated as if it is a provisioner with a weight of 0.
   *
   * @schema ProvisionerSpec#weight
   */
  readonly weight?: number;

}

/**
 * Converts an object of type 'ProvisionerSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerSpec(obj: ProvisionerSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'consolidation': toJson_ProvisionerSpecConsolidation(obj.consolidation),
    'kubeletConfiguration': toJson_ProvisionerSpecKubeletConfiguration(obj.kubeletConfiguration),
    'labels': ((obj.labels) === undefined) ? undefined : (Object.entries(obj.labels).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'limits': toJson_ProvisionerSpecLimits(obj.limits),
    'provider': obj.provider,
    'providerRef': toJson_ProvisionerSpecProviderRef(obj.providerRef),
    'requirements': obj.requirements?.map(y => toJson_ProvisionerSpecRequirements(y)),
    'startupTaints': obj.startupTaints?.map(y => toJson_ProvisionerSpecStartupTaints(y)),
    'taints': obj.taints?.map(y => toJson_ProvisionerSpecTaints(y)),
    'ttlSecondsAfterEmpty': obj.ttlSecondsAfterEmpty,
    'ttlSecondsUntilExpired': obj.ttlSecondsUntilExpired,
    'weight': obj.weight,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Consolidation are the consolidation parameters
 *
 * @schema ProvisionerSpecConsolidation
 */
export interface ProvisionerSpecConsolidation {
  /**
   * Enabled enables consolidation if it has been set
   *
   * @schema ProvisionerSpecConsolidation#enabled
   */
  readonly enabled?: boolean;

}

/**
 * Converts an object of type 'ProvisionerSpecConsolidation' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerSpecConsolidation(obj: ProvisionerSpecConsolidation | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'enabled': obj.enabled,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * KubeletConfiguration are options passed to the kubelet when provisioning nodes
 *
 * @schema ProvisionerSpecKubeletConfiguration
 */
export interface ProvisionerSpecKubeletConfiguration {
  /**
   * clusterDNS is a list of IP addresses for the cluster DNS server. Note that not all providers may use all addresses.
   *
   * @schema ProvisionerSpecKubeletConfiguration#clusterDNS
   */
  readonly clusterDns?: string[];

  /**
   * ContainerRuntime is the container runtime to be used with your worker nodes.
   *
   * @schema ProvisionerSpecKubeletConfiguration#containerRuntime
   */
  readonly containerRuntime?: string;

  /**
   * MaxPods is an override for the maximum number of pods that can run on a worker node instance.
   *
   * @schema ProvisionerSpecKubeletConfiguration#maxPods
   */
  readonly maxPods?: number;

  /**
   * SystemReserved contains resources reserved for OS system daemons and kernel memory.
   *
   * @schema ProvisionerSpecKubeletConfiguration#systemReserved
   */
  readonly systemReserved?: { [key: string]: ProvisionerSpecKubeletConfigurationSystemReserved };

}

/**
 * Converts an object of type 'ProvisionerSpecKubeletConfiguration' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerSpecKubeletConfiguration(obj: ProvisionerSpecKubeletConfiguration | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'clusterDNS': obj.clusterDns?.map(y => y),
    'containerRuntime': obj.containerRuntime,
    'maxPods': obj.maxPods,
    'systemReserved': ((obj.systemReserved) === undefined) ? undefined : (Object.entries(obj.systemReserved).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * Limits define a set of bounds for provisioning capacity.
 *
 * @schema ProvisionerSpecLimits
 */
export interface ProvisionerSpecLimits {
  /**
   * Resources contains all the allocatable resources that Karpenter supports for limiting.
   *
   * @schema ProvisionerSpecLimits#resources
   */
  readonly resources?: { [key: string]: ProvisionerSpecLimitsResources };

}

/**
 * Converts an object of type 'ProvisionerSpecLimits' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerSpecLimits(obj: ProvisionerSpecLimits | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'resources': ((obj.resources) === undefined) ? undefined : (Object.entries(obj.resources).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1]?.value }), {})),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * ProviderRef is a reference to a dedicated CRD for the chosen provider, that holds additional configuration options
 *
 * @schema ProvisionerSpecProviderRef
 */
export interface ProvisionerSpecProviderRef {
  /**
   * API version of the referent
   *
   * @schema ProvisionerSpecProviderRef#apiVersion
   */
  readonly apiVersion?: string;

  /**
   * Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
   *
   * @schema ProvisionerSpecProviderRef#kind
   */
  readonly kind?: string;

  /**
   * Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
   *
   * @schema ProvisionerSpecProviderRef#name
   */
  readonly name?: string;

}

/**
 * Converts an object of type 'ProvisionerSpecProviderRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerSpecProviderRef(obj: ProvisionerSpecProviderRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'apiVersion': obj.apiVersion,
    'kind': obj.kind,
    'name': obj.name,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
 *
 * @schema ProvisionerSpecRequirements
 */
export interface ProvisionerSpecRequirements {
  /**
   * The label key that the selector applies to.
   *
   * @schema ProvisionerSpecRequirements#key
   */
  readonly key: string;

  /**
   * Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
   *
   * @schema ProvisionerSpecRequirements#operator
   */
  readonly operator: string;

  /**
   * An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
   *
   * @schema ProvisionerSpecRequirements#values
   */
  readonly values?: string[];

}

/**
 * Converts an object of type 'ProvisionerSpecRequirements' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerSpecRequirements(obj: ProvisionerSpecRequirements | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'key': obj.key,
    'operator': obj.operator,
    'values': obj.values?.map(y => y),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
 *
 * @schema ProvisionerSpecStartupTaints
 */
export interface ProvisionerSpecStartupTaints {
  /**
   * Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
   *
   * @schema ProvisionerSpecStartupTaints#effect
   */
  readonly effect: string;

  /**
   * Required. The taint key to be applied to a node.
   *
   * @schema ProvisionerSpecStartupTaints#key
   */
  readonly key: string;

  /**
   * TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
   *
   * @schema ProvisionerSpecStartupTaints#timeAdded
   */
  readonly timeAdded?: Date;

  /**
   * The taint value corresponding to the taint key.
   *
   * @schema ProvisionerSpecStartupTaints#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ProvisionerSpecStartupTaints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerSpecStartupTaints(obj: ProvisionerSpecStartupTaints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'timeAdded': obj.timeAdded?.toISOString(),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
 *
 * @schema ProvisionerSpecTaints
 */
export interface ProvisionerSpecTaints {
  /**
   * Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
   *
   * @schema ProvisionerSpecTaints#effect
   */
  readonly effect: string;

  /**
   * Required. The taint key to be applied to a node.
   *
   * @schema ProvisionerSpecTaints#key
   */
  readonly key: string;

  /**
   * TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
   *
   * @schema ProvisionerSpecTaints#timeAdded
   */
  readonly timeAdded?: Date;

  /**
   * The taint value corresponding to the taint key.
   *
   * @schema ProvisionerSpecTaints#value
   */
  readonly value?: string;

}

/**
 * Converts an object of type 'ProvisionerSpecTaints' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_ProvisionerSpecTaints(obj: ProvisionerSpecTaints | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'effect': obj.effect,
    'key': obj.key,
    'timeAdded': obj.timeAdded?.toISOString(),
    'value': obj.value,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema ProvisionerSpecKubeletConfigurationSystemReserved
 */
export class ProvisionerSpecKubeletConfigurationSystemReserved {
  public static fromNumber(value: number): ProvisionerSpecKubeletConfigurationSystemReserved {
    return new ProvisionerSpecKubeletConfigurationSystemReserved(value);
  }
  public static fromString(value: string): ProvisionerSpecKubeletConfigurationSystemReserved {
    return new ProvisionerSpecKubeletConfigurationSystemReserved(value);
  }
  private constructor(public readonly value: any) {
  }
}

/**
 * @schema ProvisionerSpecLimitsResources
 */
export class ProvisionerSpecLimitsResources {
  public static fromNumber(value: number): ProvisionerSpecLimitsResources {
    return new ProvisionerSpecLimitsResources(value);
  }
  public static fromString(value: string): ProvisionerSpecLimitsResources {
    return new ProvisionerSpecLimitsResources(value);
  }
  private constructor(public readonly value: any) {
  }
}

